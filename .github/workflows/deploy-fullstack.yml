on:
  push:
    branches: [ "develop" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: wedev
  AZURE_WEBAPP_PACKAGE_PATH: './backend'
  NODE_VERSION: '20.x'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        # 更精确地指定 package-lock.json 的路径以优化缓存
        cache-dependency-path: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/package-lock.json'

    - name: npm install, build, and test in backend
      working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} # **关键修改1：指定工作目录**
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} # **关键修改2：只上传 backend 文件夹**

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development' # 确保你在 GitHub 仓库设置中配置了这个环境 (如果需要审批等)
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app
        # 下载后，当前工作目录的内容就是之前 backend 文件夹的内容

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} # 确保这个 secret 已在 GitHub 中配置
        package: . # **关键修改3：部署已下载的产物根目录 (它现在就是你的 backend 应用)**
